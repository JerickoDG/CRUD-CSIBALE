import sys
import unittest

import login, main, updateForm
from main import dbInstance
from backend import *
import pandas as pd

from PyQt5 import QtCore, QtTest
from PyQt5.QtWidgets import QApplication

app = QApplication(sys.argv)
dbInstance = DatabaseConnection()
dbInstance.setCursor()


class loginTest(unittest.TestCase):

	unittest.TestCase.maxDiff = None

	def setUp(self):
		self.loginWindow = login.LoginWindow()
		self.mainWindow = main.MainWindow()
	
	def test_1_login_valid(self):
		self.loginWindow = login.LoginWindow()
		self.loginWindow.username.setText('')
		self.loginWindow.password.setText('')
		QtTest.QTest.mouseClick(self.loginWindow.submitBtn, QtCore.Qt.LeftButton)
		self.assertEqual(self.loginWindow.loginStatus, True)
	
	def test_2_login_invalid(self):
		self.loginWindow = login.LoginWindow()
		self.loginWindow.username.setText('')
		self.loginWindow.password.setText('')
		QtTest.QTest.mouseClick(self.loginWindow.submitBtn, QtCore.Qt.LeftButton)
		self.assertEqual(self.loginWindow.loginStatus, False)

	
	def test_3_visualize_data(self):

		QtTest.QTest.mouseClick(self.mainWindow.pushButton_4, QtCore.Qt.LeftButton)
		self.mainWindow.filter1Line.setCurrentIndex(1)
		self.mainWindow.filter2Line.setCurrentIndex(1)
		QtTest.QTest.mouseClick(self.mainWindow.visualizeBtn, QtCore.Qt.LeftButton)

		dataToVisualize = (self.mainWindow.xLabels, self.mainWindow.yValues)
		self.assertEqual(dataToVisualize, (None, None))

		self.mainWindow.filter1Line.setCurrentIndex(1)
		self.mainWindow.filter2Line.setCurrentIndex(2)
		QtTest.QTest.mouseClick(self.mainWindow.visualizeBtn, QtCore.Qt.LeftButton)
		dataToVisualize = (self.mainWindow.xLabels, self.mainWindow.yValues)
		expectedOutput = (
			['0-5 yrs old;Female', '0-5 yrs old;Male', '0-5 yrs old;Prefer not to say', '12-17 yrs old;Female', '12-17 yrs old;Male', '12-17 yrs old;Prefer not to say', '18-25 yrs old;Female', '18-25 yrs old;Male', '18-25 yrs old;Prefer not to say', '26 and above;Female', '26 and above;Male', '26 and above;Prefer not to say', '6-11 yrs old;Female', '6-11 yrs old;Male', '6-11 yrs old;Prefer not to say'],
			[4, 5, 4, 8, 5, 4, 7, 8, 12, 34, 41, 48, 7, 7, 6] # Varies
		)
		self.assertEqual(dataToVisualize, expectedOutput)

	
	def test_4_load_table(self):
		records = []
		targetRecords = []

		tableWidget = self.mainWindow.tableWidget


		for row in range(0, tableWidget.rowCount()):
			record = []
			for col in range(0, 27):
				record.append(tableWidget.item(row, col).text())
			records.append(tuple(record))

		
		for row in selectAll(dbInstance).fetchall():
			targetRecord = []
			for data in row:
				targetRecord.append(str(data))
			targetRecords.append(tuple(targetRecord))
		
		self.assertEqual(records, targetRecords)
	

	
	def test_5_add_data(self):
		expectedOutput = [str(self.mainWindow.tableWidget.rowCount()+1), 'Test1', 'Beneficiary', 'Jr.', '7', '6-11 yrs old', 'Male', '2015-01-01', 'Epilepsy', 'No description', 'Father Name', 'Mother Name', 'Alcantara', 'Bonlao', 'Yes', 'Yes', 'Yes', 'Home Program', '1', 'Yes', 'Yes', 'Factory Worker', '5', '2020-01-01', '', 'Ongoing', '']
		# ['1044', 'Test2', 'Beneficiary2', 'Jr.', '12', '12-17 yrs old', 'Female', '2010-05-01', 'ASD', 'Rare Events', 'Father Name2', 'Mother Name2', 'Banton', 'Balogo', 'No', 'No', 'No', 'K-12 Curriculum', '2', 'No', 'No', '', '5', '2020-01-01', '2022-05-01', 'Closed', 'Inactive']

		self.mainWindow.firstNameLine.setText("Test1")
		self.mainWindow.lastNameLine.setText("Beneficiary")
		self.mainWindow.suffixLine.setText("Jr.")
		# self.mainWindow.ageLine.setText("18")
		self.mainWindow.genderLine.setCurrentIndex(1)
		self.mainWindow.birthDateLine.setDate(QtCore.QDate(2015, 1, 1))
		# Age autogenerated
		# Age Group autogenerated
		self.mainWindow.disSpecLine.setCurrentIndex(1)
		self.mainWindow.disDescLine.setText("No description")
		self.mainWindow.fatherNameLine.setText("Father Name")
		self.mainWindow.motherNameLine.setText("Mother Name")
		self.mainWindow.muncLine.setCurrentIndex(1)
		# Barangay autogenerated (the first index in corresponding QComboBox)
		self.mainWindow.ipLine.setCurrentIndex(1)
		self.mainWindow.philhealthLine.setCurrentIndex(1)
		self.mainWindow.cctLine.setCurrentIndex(1)
		self.mainWindow.educationLine.setCurrentIndex(1)
		self.mainWindow.gradeLvlLine.setCurrentIndex(1)
		self.mainWindow.medicineLine.setCurrentIndex(1)
		self.mainWindow.employedLine.setCurrentIndex(1)
		self.mainWindow.occupationLine.setText("Factory Worker")
		self.mainWindow.numFamLine.setText("5")
		self.mainWindow.admissionDateLine.setDate(QtCore.QDate(2020, 1, 1))
		self.mainWindow.statusLine.setCurrentIndex(1)
		# No Closure Date if Ongoing
		# No Reason of Closure if Ongoing
		QtTest.QTest.mouseClick(self.mainWindow.confirmAddBtn, QtCore.Qt.LeftButton)


		QtTest.QTest.mouseClick(self.mainWindow.goBackHomeBtn, QtCore.Qt.LeftButton)


		addedRecord = []
		for i in range(0, 27):
			# print(self.mainWindow.tableWidget.item(self.mainWindow.tableWidget.rowCount()-1, i).text())
			addedRecord.append(self.mainWindow.tableWidget.item(self.mainWindow.tableWidget.rowCount()-1, i).text())


		
		self.assertEqual(addedRecord, expectedOutput)
		# self.assertEqual(1,1)
		# self.assertEqual(addedRecords, addRecordTestCases)
	
	def test_6_remove_data(self):
		# QtTest.QTest.mouseClick(self.mainWindow.goBackHomeBtn, QtCore.Qt.LeftButton)
		# print(self.mainWindow.tableWidget.rowCount())
		secondToTheLastRecord = [self.mainWindow.tableWidget.item(self.mainWindow.tableWidget.rowCount()-2, i).text() for i in range (0, 27)]
		self.mainWindow.tableWidget.item(self.mainWindow.tableWidget.rowCount()-1, 0).setCheckState(QtCore.Qt.CheckState.Checked)
		# checkedItems = self.mainWindow.getTableCheckedBoxes()
		self.mainWindow.removeBeneficiaryData()
		# QtTest.QTest.mouseClick(self.mainWindow.msg.button(QMessageBox.Ok), QtCore.Qt.LeftButton)
		lastRowAfterRemove = [self.mainWindow.tableWidget.item(self.mainWindow.tableWidget.rowCount()-1, i).text() for i in range (0, 27)]
		self.assertEqual(lastRowAfterRemove, secondToTheLastRecord)

	def test_remove_multiple_data(self):
		expectedNumberOfRecordsAfterRemoval = self.mainWindow.tableWidget.rowCount() - 5
		for i in range(1, 6):
			self.mainWindow.tableWidget.item(self.mainWindow.tableWidget.rowCount()-i, 0).setCheckState(QtCore.Qt.CheckState.Checked)
		
		self.mainWindow.removeBeneficiaryData()
		numberOfRecordsBeforeRemoval = self.mainWindow.tableWidget.rowCount()
		self.assertEqual(numberOfRecordsBeforeRemoval, expectedNumberOfRecordsAfterRemoval)
	

	def test_7_update_data(self):
		expectedOutput = ['1', 'Firstname', 'Lastname', 'Sr.', '22', '18-25 yrs old', 'Prefer not to say', '2000-01-01', 'Celebral Palsy', 'Recently happened', '', '', 'Cajidiocan', 'Alibagon', 'Yes', 'Yes', 'Yes', 'K-12 Curriculum', '2', 'No', 'No', '', '5', '2019-06-25', '', 'Ongoing', '']


		updateFirstNameInput = "Firstname"
		updateLastNameInput = "Lastname"
		updateSuffixInput = "Sr."
		


		item = self.mainWindow.tableWidget.item(0, 0)
		assert item is not None
		rect = self.mainWindow.tableWidget.visualItemRect(item)
		QtTest.QTest.mouseDClick(self.mainWindow.tableWidget.viewport(), QtCore.Qt.LeftButton, pos=rect.center())
		rowNum = self.mainWindow.tableWidget.currentRow()
		benfId = self.mainWindow.tableWidget.item(rowNum, 0).text()
		results = selectRowFromBenfId(benfId=benfId, dbCon=dbInstance)
		self.mainWindow.showUpdateRow(results)
		self.updateWindow = updateForm.UpdateForm(results=results, mainWindowInstance=self.mainWindow)


		self.updateWindow.firstNameLine.setText(updateFirstNameInput)
		self.updateWindow.lastNameLine.setText(updateLastNameInput)
		self.updateWindow.suffixLine.setText(updateSuffixInput)
		self.updateWindow.genderLine.setCurrentIndex(3)
		self.updateWindow.birthDateLine.setDate(QtCore.QDate(2000 , 1, 1))
		self.updateWindow.disSpecLine.setCurrentIndex(2)
		self.updateWindow.disDescLine.setText("Recently happened")
		self.updateWindow.fatherNameLine.setText("")
		self.updateWindow.motherNameLine.setText("")
		self.updateWindow.muncLine.setCurrentIndex(3)
		self.updateWindow.ipLine.setCurrentIndex(1)
		self.updateWindow.philhealthLine.setCurrentIndex(1)
		self.updateWindow.cctLine.setCurrentIndex(1)
		self.updateWindow.educationLine.setCurrentIndex(3)
		self.updateWindow.gradeLvlLine.setCurrentIndex(2)
		self.updateWindow.statusLine.setCurrentIndex(1)
		self.updateWindow.medicineLine.setCurrentIndex(2)
		self.updateWindow.employedLine.setCurrentIndex(2)
		self.updateWindow.numFamLine.setText('5')
		self.updateWindow.admissionDateLine.setDate(QtCore.QDate(2019, 6, 25))
		

		QtTest.QTest.mouseClick(self.updateWindow.confirmModifyBtn, QtCore.Qt.LeftButton)

		updatedRecord = [self.mainWindow.tableWidget.item(0, i).text() for i in range(0, 27)]

		self.assertEqual(updatedRecord, expectedOutput)
	
	def test_8_export_data(self):
		recordsInTable = []
		for row in range(0, self.mainWindow.tableWidget.rowCount()):
			record = []
			for col in range(0, 27):
				record.append(self.mainWindow.tableWidget.item(row, col).text())
			recordsInTable.append(tuple(record))

		self.mainWindow.exportDirectoryLine.setText('C:/Users/Jco/Downloads')
		QtTest.QTest.mouseClick(self.mainWindow.exportBtn, QtCore.Qt.LeftButton)
		filePath = (f'{self.mainWindow.exportDirectoryLine.text()}/beneficiaryData/{self.mainWindow.fileName}').replace('/','\\')
		df = pd.read_excel(filePath)
		df.fillna('', inplace=True)
		df = df.astype(str)
		listDf = df.values.tolist()
		tupleDf = [tuple(x) for x in listDf]
		
		self.assertEqual(tupleDf, recordsInTable)
	

		


if __name__ == "__main__":
	unittest.main()